{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/05/mysql-search-optimization/","result":{"data":{"site":{"siteMetadata":{"title":"dominikaschbacher.com"}},"markdownRemark":{"id":"8e1b8960-9b2f-5784-8715-2a339817bb11","excerpt":"The goal of this post is to implement a search mechanism that searches for songs and artists in a playlist table,\nthat has about 11 million entries. All data…","html":"<p>The goal of this post is to implement a search mechanism that searches for songs and artists in a playlist table,\nthat has about 11 million entries. All data has been gathered from a third party application that provides a history\nof the songs played on Austrian radio stations. One entry consists of the play date, the title and the artist.\nUnfortunately the data has to be downloaded as an html file that can be converted into SQL statements later on but\ndoes not have any structure.</p>\n<p>Thanks to <a href=\"https://github.com/davidkroell\">@davidkroell</a> for the help concerning the database optimization.</p>\n<h2>Storing the data</h2>\n<p>At the beginning all the data had to be stored in a MySQL database. Therefore 2 tables were created: <em>radio_stations</em> and <em>songs</em>.</p>\n<p><strong>Radio Stations:</strong></p>\n<p>The table <em>radio_stations</em> was created using the following SQL statement. The radio stations were inserted manually\nand contain and id, an abbreviation that is used when downloading new data from the third party application and a display name.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>radio_stations<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">`</span>abbreviation<span class=\"token punctuation\">`</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">CONSTRAINT</span> pk_radio_stations <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>abbreviation</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>fm4</td>\n<td>FM4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>oe3</td>\n<td>Hitradio Ö3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>radio_bgl</td>\n<td>Radio Burgenland</td>\n</tr>\n<tr>\n<td>4</td>\n<td>radio_ktn</td>\n<td>Radio Kärnten</td>\n</tr>\n<tr>\n<td>5</td>\n<td>radio_noe</td>\n<td>Radio Niederösterreich</td>\n</tr>\n<tr>\n<td>6</td>\n<td>radio_ooe</td>\n<td>Radio Oberösterreich</td>\n</tr>\n<tr>\n<td>7</td>\n<td>radio_sbg</td>\n<td>Radio Salzburg</td>\n</tr>\n<tr>\n<td>8</td>\n<td>radio_stmk</td>\n<td>Radio Steiermark</td>\n</tr>\n<tr>\n<td>9</td>\n<td>radio_tirol</td>\n<td>Radio Tirol</td>\n</tr>\n<tr>\n<td>10</td>\n<td>radio_vbg</td>\n<td>Radio Vorarlberg</td>\n</tr>\n<tr>\n<td>11</td>\n<td>radio_wien</td>\n<td>Radio Wien</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Songs:</strong></p>\n<p>During the first iteration the table <em>songs</em> had the following columns. This table has not been normalized\nbecause of the sloppy input data and also for benchmarks. All data has been stored by using generated SQL\nfiles from the downloaded HTML file. To convert the HTML into an SQL file a custom bash script was used that\nreplaced the HTML syntax with SQL syntax by using <em>sed</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>songs<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">`</span>radio_station_id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">`</span>play_date<span class=\"token punctuation\">`</span> <span class=\"token keyword\">DATETIME</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">`</span>artist<span class=\"token punctuation\">`</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">constraint</span> pk_songs <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">constraint</span> fk_songs_radio_stations <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>radio_station_id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">references</span> radio_stations<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>radio<em>station</em>id</th>\n<th>play_date</th>\n<th>title</th>\n<th>artist</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>2012-01-01 00:00:00</td>\n<td>Title 01</td>\n<td>Artist 01</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>2012-01-01 00:05:00</td>\n<td>Title 02</td>\n<td>Artist 02</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>2012-01-01 00:10:00</td>\n<td>Title 03</td>\n<td>Artist 03</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<h2>Search</h2>\n<p>The first search implementation only allowed searching for song titles and not for artists.\nThis has been realized using the following query (simple but inefficient).</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> count <span class=\"token keyword\">FROM</span> songs\n<span class=\"token keyword\">WHERE</span> radio_station_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">AND</span> title <span class=\"token operator\">like</span> <span class=\"token string\">\"%test%\"</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">,</span> radio_station_id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> count <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>title</th>\n<th>artist</th>\n<th>count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Whitest Boy On The Beach</td>\n<td>Fat White Family</td>\n<td>95</td>\n</tr>\n<tr>\n<td>The Greatest View</td>\n<td>Flume / Isabelle Manfredi</td>\n<td>77</td>\n</tr>\n<tr>\n<td>Test</td>\n<td>Little Dragon</td>\n<td>60</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Benchmarks:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Search text</th>\n<th>MySQL speed</th>\n<th>Go API speed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>test</td>\n<td>3094ms</td>\n<td>3105ms</td>\n</tr>\n<tr>\n<td>a</td>\n<td>3109ms</td>\n<td>3055ms</td>\n</tr>\n<tr>\n<td>bc</td>\n<td>2390ms</td>\n<td>2491ms</td>\n</tr>\n<tr>\n<td>yellow</td>\n<td>1391ms</td>\n<td>1682ms</td>\n</tr>\n<tr>\n<td>monday</td>\n<td>1329ms</td>\n<td>1557ms</td>\n</tr>\n</tbody>\n</table>\n<h2>Optimization 01 - Cached table</h2>\n<p>The first optimization was a cache table that stores all grouped songs per radio station. Therefore the\ngroup by can be left away. To insert the grouped entries the following statement has been used:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- CREATE TABLE</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> songs_per_radio_station <span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    title <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    artist <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    radio_station_id <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    count <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">CONSTRAINT</span> pk_songs_per_radio_station <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">CONSTRAINT</span> fk_songs_per_radio_station_radio_station <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>radio_station_id<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">REFERENCES</span> radio_stations <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- INSERT DATA</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> songs_per_radio_station\n<span class=\"token keyword\">SELECT</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">as</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">,</span> radio_station_id<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> count\n<span class=\"token keyword\">FROM</span> songs\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">,</span> radio_station_id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> radio_station_id <span class=\"token keyword\">asc</span><span class=\"token punctuation\">,</span> count <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Afterwards the following statement can be used to search for a title:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> songs_per_radio_station\n<span class=\"token keyword\">WHERE</span> radio_station_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">AND</span> title <span class=\"token operator\">like</span> <span class=\"token string\">\"%test%\"</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> count <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>Search text</th>\n<th>old MySQL speed</th>\n<th>new MySQL speed</th>\n<th>old Go API speed</th>\n<th>new Go API speed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>test</td>\n<td>3094ms</td>\n<td>110ms</td>\n<td>3105ms</td>\n<td>721ms</td>\n</tr>\n<tr>\n<td>a</td>\n<td>3109ms</td>\n<td>141ms</td>\n<td>3055ms</td>\n<td>869ms</td>\n</tr>\n<tr>\n<td>bc</td>\n<td>2390ms</td>\n<td>94ms</td>\n<td>2491ms</td>\n<td>212ms</td>\n</tr>\n<tr>\n<td>yellow</td>\n<td>1391ms</td>\n<td>78ms</td>\n<td>1682ms</td>\n<td>181ms</td>\n</tr>\n<tr>\n<td>monday</td>\n<td>1329ms</td>\n<td>62ms</td>\n<td>1557ms</td>\n<td>188ms</td>\n</tr>\n</tbody>\n</table>\n<h2>Optimization 02 - Fulltext Index</h2>\n<p>After creating a cache table a fulltext index has been used on the cached table. This allows\nthe user to search for songs and artists. The best matching case will be shown first and afterwards\nthe entries are sorted by count.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- CREATE TABLE</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> songs_per_radio_station <span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    title <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    artist <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    radio_station_id <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    count <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    FULLTEXT <span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">CONSTRAINT</span> pk_songs_per_radio_station <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">CONSTRAINT</span> fk_songs_per_radio_station_radio_station <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>radio_station_id<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">REFERENCES</span> radio_stations <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- INSERT DATA</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> songs_per_radio_station\n<span class=\"token keyword\">SELECT</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">as</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">,</span> radio_station_id<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> count\n<span class=\"token keyword\">FROM</span> songs\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">,</span> radio_station_id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> radio_station_id <span class=\"token keyword\">asc</span><span class=\"token punctuation\">,</span> count <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Songs and artists can be searched using the following query:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">,</span> count\n<span class=\"token keyword\">FROM</span> songs_per_radio_station\n<span class=\"token keyword\">WHERE</span> radio_station_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">AND</span> <span class=\"token keyword\">MATCH</span> <span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> artist<span class=\"token punctuation\">)</span> AGAINST <span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">30</span>\n<span class=\"token keyword\">OFFSET</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>Search text</th>\n<th>old MySQL speed</th>\n<th>new MySQL speed</th>\n<th>old Go API speed</th>\n<th>new Go API speed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>test</td>\n<td>110ms</td>\n<td>31ms</td>\n<td>721ms</td>\n<td>164ms</td>\n</tr>\n<tr>\n<td>a</td>\n<td>141ms</td>\n<td>31ms</td>\n<td>869ms</td>\n<td>31ms</td>\n</tr>\n<tr>\n<td>bc</td>\n<td>94ms</td>\n<td>16ms</td>\n<td>212ms</td>\n<td>34ms</td>\n</tr>\n<tr>\n<td>yellow</td>\n<td>78ms</td>\n<td>31ms</td>\n<td>181ms</td>\n<td>32ms</td>\n</tr>\n<tr>\n<td>monday</td>\n<td>62ms</td>\n<td>32ms</td>\n<td>188ms</td>\n<td>34ms</td>\n</tr>\n</tbody>\n</table>\n<p>These outcomes lead to the final result which is a performance improvement with a maximum request time\nreduction of 1/100 of the original request duration.</p>","frontmatter":{"title":"MySQL search optimization","date":"May 23, 2019","description":null,"author":"aschbacd"}},"previous":{"fields":{"slug":"/2019/04/docker-for-windows/"},"frontmatter":{"title":"Docker for Windows - The better solution"}},"next":{"fields":{"slug":"/2019/06/minified-docker-images-for-frontend-applications/"},"frontmatter":{"title":"Minified Docker images for frontend applications"}}},"pageContext":{"id":"8e1b8960-9b2f-5784-8715-2a339817bb11","previousPostId":"4f637d7b-016b-5473-90d9-3260933f3407","nextPostId":"df7d1e19-fc83-5d5a-b671-929542da9512"}},"staticQueryHashes":["2841359383"]}