{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/04/docker-for-windows/","result":{"data":{"site":{"siteMetadata":{"title":"dominikaschbacher.com"}},"markdownRemark":{"id":"4f637d7b-016b-5473-90d9-3260933f3407","excerpt":"Since the official Docker for Windows platform utilizes Hyper-V any other hypervisor won’t work anymore.\nAfter installing Docker for Windows, my VMWare virtual…","html":"<p>Since the official Docker for Windows platform utilizes Hyper-V any other hypervisor won’t work anymore.\nAfter installing Docker for Windows, my VMWare virtual machines were not able to start.\nBut I still want to use Docker on my laptop without a VM.\nI found out, that Docker has built-in <a href=\"https://medium.com/lucjuggery/docker-tips-access-the-docker-daemon-via-ssh-97cd6b44a53\">SSH support</a> since version 18.09.\nThis is made possible through the client-server architecture.</p>\n<blockquote>\n<p>Note: I also mentioned this in my <a href=\"https://github.com/davidkroell/docker-deepdive\">presentation about the Docker ecosystem</a></p>\n</blockquote>\n<h2>What we need</h2>\n<ul>\n<li>A Linux server with Docker (18.09+) and SSH access</li>\n<li>A Windows machine (your device)</li>\n</ul>\n<p>Every command issued on the windows machine will be executed on the linux server.</p>\n<h2>Preparation</h2>\n<p>We are now going to prepare the environment.</p>\n<p>A dollar sign (<code class=\"language-text\">$</code>) means, that this command should be executed on the linux server.\nA greater than sign (<code class=\"language-text\">&gt;</code>) means, that this command should be executed on the windows machine.</p>\n<h3>Docker client</h3>\n<p>As far as I know, the standalone Docker client is not publicy available for Windows,\nbut it is built in Go and it’s open source, so a binary may be built from source.</p>\n<p>For this, we will use our linux server with Docker installed.</p>\n<p>First, check if Docker version satisfies our needs.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker -v\nDocker version <span class=\"token number\">18.09</span>.4, build d14af54</code></pre></div>\n<p>If the Docker version is not at least 18.09, update your daemon.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone https://github.com/docker/cli\n$ <span class=\"token builtin class-name\">cd</span> cli\n\n<span class=\"token comment\"># build the windows binary</span>\n$ <span class=\"token function\">make</span> -f docker.Makefile binary-windows</code></pre></div>\n<p>The build runs inside a Docker container and therefore does not require any other dependencies.\nThe binary is then outputted in the <code class=\"language-text\">build</code> directory.\nYou can check the file type with the Linux <code class=\"language-text\">file</code> utility.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">file</span> build/docker-windows-amd64\nbuild/docker-windows-amd64: PE32+ executable <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span> x86-64, <span class=\"token keyword\">for</span> MS Windows</code></pre></div>\n<p>Now, copy the file to your Windows machine and rename it to <code class=\"language-text\">docker</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">scp</span> johndoe@example.com:cli/build/docker-windows-amd64 docker</code></pre></div>\n<p>You may now execute it with <code class=\"language-text\">./docker</code>.\nCopy this executeable to a location which is in your path environment variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> move docker C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>System32\n\n<span class=\"token comment\"># check version</span>\n<span class=\"token operator\">></span> docker -v\nDocker version <span class=\"token number\">18.09</span>.0-dev, build 51668a30</code></pre></div>\n<p>You may now try the client out.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> docker info\nerror during connect: Get http://%2F%2F.%2Fpipe%2Fdocker_engine/v1.39/info: <span class=\"token function\">open</span> //./pipe/docker_engine: Das System kann die angegebene Datei nicht finden. In the default daemon configuration on Windows, the docker client must be run elevated to connect. This error may also indicate that the docker daemon is not running.</code></pre></div>\n<p>As you can see, this does not work, because there is only the client installed, but not the daemon.</p>\n<h3>DOCKER_HOST and SSH remotes</h3>\n<p>The Docker client wants to connect to a special file in the filesystem.\nThe daemon to connect to, can be specified in the CLI with the parameter <code class=\"language-text\">-H</code> (host).</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> docker -H ssh://johndoe@example.com info\njohndoe@example.com's password:\nContainers: <span class=\"token number\">17</span>\n Running: <span class=\"token number\">6</span>\n Paused: <span class=\"token number\">0</span>\n Stopped: <span class=\"token number\">11</span>\nImages: <span class=\"token number\">117</span>\n<span class=\"token punctuation\">[</span>output truncated<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Type in your password and the Docker info prints out.\nYou may of course automate this with passwordless login, utilizing private keys.</p>\n<p>As of now, you have to specify <code class=\"language-text\">-H ssh://...</code> in every call.\nThe environment variable <code class=\"language-text\">DOCKER_HOST</code> can be used to set this automatically.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_HOST</span><span class=\"token operator\">=</span>ssh://johndoe@example.com\n<span class=\"token operator\">></span> docker info\njohndoe@example.com's password:\nContainers: <span class=\"token number\">17</span>\n Running: <span class=\"token number\">6</span>\n Paused: <span class=\"token number\">0</span>\n Stopped: <span class=\"token number\">11</span>\nImages: <span class=\"token number\">117</span>\n<span class=\"token punctuation\">[</span>output truncated<span class=\"token punctuation\">]</span></code></pre></div>\n<p>This variable is only available in the current session.\nTo set this permanent, the Windows toolset can be used.\nA guide for this is available <a href=\"http://www.forbeslindesay.co.uk/post/42833119552/permanently-set-environment-variables-on-windows\">here</a>.</p>\n<h3>Conclusion</h3>\n<p>Now, you are able to access a Docker daemon from your local windows device and your virtual machines are still working.\nAdditional software is not needed, just a simple binary.</p>","frontmatter":{"title":"Docker for Windows - The better solution","date":"April 10, 2019","description":null,"author":"davidkroell"}},"previous":{"fields":{"slug":"/2019/01/npm-basics/"},"frontmatter":{"title":"NPM basics"}},"next":{"fields":{"slug":"/2019/05/mysql-search-optimization/"},"frontmatter":{"title":"MySQL search optimization"}}},"pageContext":{"id":"4f637d7b-016b-5473-90d9-3260933f3407","previousPostId":"e622e17d-6dc2-56bb-b65a-0e51fda7bad1","nextPostId":"8e1b8960-9b2f-5784-8715-2a339817bb11"}},"staticQueryHashes":["2841359383"]}